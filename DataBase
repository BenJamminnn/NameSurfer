import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;

import acm.util.ErrorException;

//import AssiNameSurferConstants;
//import Assignment6.NameSurferEntry;

/*
 * File: NameSurferDataBase.java
 * -----------------------------
 * This class keeps track of the complete database of names.
 * The constructor reads in the database from a file, and
 * the only public method makes it possible to look up a
 * name and get back the corresponding NameSurferEntry.
 */

public class NameSurferDataBase implements NameSurferConstants {
	
/**
 * Creates a new NameSurferDataBase and initializes it using the
 * data in the specified file.  The constructor throws an error
 * exception if the requested file does not exist or if an error
 * occurs as the file is being read.
 */ 
	private static HashMap<String, NameSurferEntry> entryMap = new HashMap<String, NameSurferEntry>();
	
	public static HashMap<String, NameSurferEntry> loadEntries() {
		String filename = "NamesData.txt";
		try {
			BufferedReader rd = new BufferedReader(new FileReader (filename));
			while(true) {
				String line = rd.readLine();
				if(line == null) break;
				NameSurferEntry entry = parseLine(line);
				entryMap.put(entry.getName(), entry);
			}
			rd.close();
		} catch(IOException ex) {
			throw new ErrorException(ex);
		}	
		return entryMap;
	}
	
/* Method: findEntry(name) */
/**
 * Returns the NameSurferEntry associated with this name, if one
 * exists.  If the name does not appear in the database, this
 * method returns null.
 */
	public static NameSurferEntry findEntry(String name) {
		return entryMap.get(name);
	
	}
	
	private static NameSurferEntry parseLine(String line) {
		int endName = line.indexOf(' ');						//get the name of the entry
		String name = line.substring(0 , endName);
		line = line.substring(endName);
		int[] nameData = new int[11];
		String[] numbers = line.substring(1).split(" ");
		for(int i = 0; i < numbers.length; i++) {
			if(numbers[i].length() == 0) continue;
			nameData[i] = Integer.parseInt(numbers[i]);
		}
		return new NameSurferEntry(name, nameData);
	}
}


